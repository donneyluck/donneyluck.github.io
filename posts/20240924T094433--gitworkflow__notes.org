#+title:      GitWorkFlow
#+date:       [2024-09-24 Tue 09:44]
#+filetags:   :notes:
#+identifier: 20240924T094433
#+description: How to use git collaboration in daily development
* GitWorkFlow
Git 是一个分布式版本控制系统，它支持多种工作流程。以下是一些常见的 Git 工作流程：
** 集中式工作流：
适用于小型团队或项目。
通常只有一个主分支（如 main 或 master）和几个长期分支（如 develop、feature）。
开发者直接在 develop 分支上工作，完成后合并到 main。

** 功能分支工作流：
适用于大多数团队
从 main 或 develop 分支创建一个新分支来开发新功能。
开发完成后，通过 Pull Request (PR) 或者直接合并到 develop 分支。
然后从 develop 分支合并到 main。

** Gitflow 工作流：
适用于发布周期固定的项目
有 main、develop、feature、release、hotfix 等分支
feature 分支用于开发新功能，完成后合并到 develop
release 分支用于准备发布，完成后合并到 main 和 develop
hotfix 分支用于修复 main 分支上的紧急问题，完成后合并到 main 和 develop

** Forking 工作流：
适用于开源项目
每个开发者都有自己的仓库。
开发者在自己的仓库上创建分支进行开发。
通过 Pull Request 将更改提交到原始仓库。

** Pull Request 工作流：
适用于团队协作
开发者在本地仓库的 main 分支上创建新的分支进行开发。
开发完成后，将本地分支推送到远程仓库。
在远程仓库上创建 Pull Request，请求将更改合并到 main 分支。
其他开发者可以审查代码，通过后合并。

** 以下是一般的工作方式
- 确保本地仓库是最新的：
#+begin_src bash
git checkout main
git pull origin main
#+end_src
- 创建新的本地分支：
#+begin_src bash
git checkout -b feature/your-feature-name
#+end_src
- 在新分支上进行开发：
编写代码，提交更改
推送新分支到远程仓库：
#+begin_src bash
git push origin feature/your-feature-name
#+end_src
- 创建 Pull Request：
在远程仓库（如 GitHub）上创建 Pull Request, 请求将你的 feature/your-feature-name 分支合并到 develop 分支
等待代码审查：
其他开发者审查代码，提出反馈。
- 合并分支：
代码审查通过后，合并 Pull Request 到 develop 分支。
将 develop 分支合并到 main：
当 develop 分支稳定后，可以将其合并到 main 分支。
- 删除旧的本地和远程分支(可选)：
#+begin_src bash
git branch -d feature/your-feature-name
git push origin --delete feature/your-feature-name
#+end_src
这是一个基本的工作流程，具体可能会根据团队的需求和习惯有所不同。


