#+title:      Lua 和 C 如何交互
#+date:       [2024-10-18 Fri 09:46]
#+filetags:   :notes:
#+identifier: 20241018T094654
#+description: Lua 和 C 交互的教程
* Lua 和 C 如何交互
** 堆栈
lua与c之间交互是通过“lua堆栈”通信的。不管是lua调用c还是c调用lua，都是通过操作lua堆栈实现的。顾名思义，lua堆栈也满足后进先出的特点，入栈/出栈都围绕栈顶进行的。与通用的栈不同的是，这个虚拟栈每个位置都对应一个索引，可以通过索引操作指定位置的数据。1代表栈底，向栈顶依次递增；-1代表栈顶，向栈底依次递减，如图。
\\

#+begin_export html
<figure>
<img src="../../assets/1.png" alt="lost" title="Lua堆栈结构" width="600px">

<figcaption><span class="figure-number">Figure 1: </span>Lua堆栈结构</figcaption>
</figure>
#+end_export
\\
** 全局表
Lua的全局表可以想象成一个map哈希表结构,比如Lua有一个变量:
name = "hello world"
全局表中存放了name和hello world的对应关系, 可以通过name在全局表中找到对应的hello world
** lua中类型在c中如何表示
要实现c和lua之间的交互，先了解下lua中基本类型与c中类型怎么对应的。lua中有八种基本类型：nil、boolean、number、string、table、function、userdata、thread，其中，userdata分轻量用户数据(lightuserdata)和完成用户数据(userdata)两种。这些类型都可以压入栈中，在c中统一用TValue结构表示，是一个{值，类型}结构。
\\

#+begin_export html
<figure>
<img src="../../assets/2.png" alt="lost" title="lua类型在c中如何表示" width="600px">

<figcaption><span class="figure-number">Figure 1: </span>lua类型在c中如何表示</figcaption>
</figure>
#+end_export
\\
TValue->tt表示类型，类型定义在lua.h，nil为LUA_TNIL，boolean为LUA_TBOOLEAN等
#+begin_src c
// lua.h
#define LUA_TNIL                0
#define LUA_TBOOLEAN            1
#define LUA_TLIGHTUSERDATA      2
#define LUA_TNUMBER             3
#define LUA_TSTRING             4
#define LUA_TTABLE              5
#define LUA_TFUNCTION           6
#define LUA_TUSERDATA           7
#define LUA_TTHREAD             8
#+end_src
TValue->Value是个union：
int b：只存boolean类型，注：number类型并不存在这里，b只存boolean
lua_Number n：存放所有number类型
void *p：存放轻量用户数据类型(lightuserdata)
gcObject *gc：存放所有需要垃圾回收的类型，是一个指向union GCObject的指针，通过GCObject可以看到其包含string、userdata、closure、table、proto、upvalue、thread
由此可知，nil、boolean、number、lightuserdata类型是把数据本身直接存在栈里，和lua的垃圾回收无关；而GCObject表示的类型是把数据的内存地址（即指针）存在栈里的，当生命周期结束需要垃圾回收释放内存。
** 对堆栈的基本操作
luaL_newstate: 创建一个状态机
lua_close: 关闭状态机
#+begin_src c
#include <stdio.h>

#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>

int main(int argc, char *argv[]){
    lua_State *L = luaL_newstate(); //创建一个状态机

    lua_pushnil(L); //nil
    int type = lua_type(L, -1);
    printf("nil type = %d\n", type);
    if(lua_isnil(L, -1)){
        printf("------nil-----\n");
    }

    lua_pushboolean(L, 0); //boolean
    type = lua_type(L, -1);
    printf("boolean type = %d\n", type);
    if(lua_isboolean(L, -1))
        printf("--------boolean------\n");

    lua_pushlightuserdata(L, NULL); //lightuserdata
    type = lua_type(L, -1);
    printf("lightuserdata type = %d\n", type);
    if(lua_islightuserdata(L, -1))
        printf("--------lightuserdata------\n");

    lua_pushnumber(L, 10); //number
    type = lua_type(L, -1);
    printf("number type = %d\n", type);
    if(lua_isnumber(L, -1))
        printf("--------number------\n");

    lua_pushstring(L, "string"); //string
    type = lua_type(L, -1);
    printf("string type = %d\n", type);
    if(lua_isstring(L, -1))
        printf("--------string------\n");

    lua_newtable(L); //table, 创建空表，并压入栈
    type = lua_type(L, -1);
    printf("table type = %d\n", type);
    if(lua_istable(L, -1))
        printf("--------table------\n");

    lua_newuserdata(L, 1024); //userdata, 分配1024大小的内存块，并把内存地址压入栈
    type = lua_type(L, -1);
    printf("userdata type = %d\n", type);
    if(lua_isuserdata(L, -1))
        printf("--------userdata------\n");

    lua_pushthread(L); //thread, 创建一个lua新线程,并将其压入栈。lua线程不是OS线程
    type = lua_type(L, -1);
    printf("thread type = %d\n", type);
    if(lua_isthread(L, -1))
        printf("--------thread------\n");

    lua_close(L); //关闭状态机
    return 0;
}
#+end_src
lua_pushXXX：push*族api向栈顶压入数据，比如lua_pushnumber压入数值，lua_pushstring压入字符串，lua_pushcclosure压入c闭包。
lua_isXXX：is*族api判断栈里指定位置的索引是否是指定类型，比如，lua_istable(L,-1)判断栈顶位置的数据是否是表，lua_isuserdata(L,-1)判断栈顶位置的数据是否是用户数据等。
运行结果如下，对应lua.h中的类型定义。
\\

#+begin_export html
<figure>
<img src="../../assets/3.png" alt="lost" title="运行结果" width="600px">

<figcaption><span class="figure-number">Figure 1: </span>运行结果</figcaption>
</figure>
#+end_export
\\
** c如何调用Lua的，即c作为宿主语言，Lua为附加语言。c和Lua之间是通过Lua堆栈交互的，基本流程是：把元素入栈——从栈中弹出元素——处理——把结果入栈。
*** 加载运行Lua脚本
通过luaL_newstate()创建一个状态机L，c与Lua之间交互的api的第一个参数几乎都是L，是因为可以创建多个状态机，调用api需指定在哪个状态机上操作。lua_close(L)关闭状态机。
#+begin_src c
int main(int argc, char *argv[]){
    lua_State *L = luaL_newstate(); //创建一个状态机
    luaL_openlibs(L); //打开所有lua标准库

    int ret = luaL_loadfile(L, "c2lua.lua"); //加载但不运行lua脚本
    if(ret != LUA_OK){
        const char *err = lua_tostring(L, -1); //加载失败，会把错误信息压入栈顶
        printf("-------loadfile error = %s\n", err);
        lua_close(L);
        return 0;
    }

    ret = lua_pcall(L, 0, 0, 0); //保护模式调用栈顶函数
    if(ret != LUA_OK){
        const char *err = lua_tostring(L, -1); //发生错误，会把唯一值(错误信息)压入栈顶
        printf("-------pcall error = %s\n", err);
        lua_close(L);
        return 0;
    }

    lua_close(L);
    return 0;
}
#+end_src
在c中加载运行Lua脚本的流程通常是，luaL_newstate、luaL_openlibs、luaL_loadfile、lua_pcall
*** 操作Lua中全局变量
lua_getglobal(L, name)，获取Lua脚本中命名为name的全局变量并压栈，然后c通过栈获取
#+begin_src c
void test_global(lua_State *L){ //读取，重置，设置全局变量
    lua_getglobal(L, "var"); //获取全局变量var的值并压入栈顶
    int var = lua_tonumber(L, -1);
    printf("var = %d\n", var);
    lua_pushnumber(L, 10);
    lua_setglobal(L, "var"); //设置全局变量var为栈顶元素的值，即10
    lua_pushstring(L, "c str");
    lua_setglobal(L, "var2"); //设置全局变量var2为栈顶元素的值，即c str

    lua_getglobal(L, "f");
    lua_pcall(L,0,0,0);
}
#+end_src
#+begin_src lua
var = 5

function f()
    print("global var = ", var, var2)
end
#+end_src
*** 调用Lua中函数
通过lua_pcall这个api在保护模式下调用一个Lua函数
#+begin_src c
int lua_pcall (lua_State *L, int nargs, int nresults, int msgh);
#+end_src
nargs是函数参数的个数，nresults是函数返回值的个数。
约定：调用前需要依次把函数，nargs个参数（从左向右）压栈（此时最后一个参数在栈顶位置），然后函数和所有参数都出栈，并调用指定的Lua函数。
如果调用过程没有发生错误，会把nresults个结果（从左向右）依次压入栈中（此时最后一个结果在栈顶位置），并返回成功LUA_OK。
如果发生错误，lua_pcall会捕获它，把唯一返回值（错误信息）压栈，然后返回特定的错误码。此时，如果设置msgh不为0，则会指定栈上索引msgh指向的位置为错误处理函数，然后以错误信息作为参数调用该错误处理函数，最后把返回值作为错误信息压栈。
#+begin_src c
void test_function(lua_State *L){ //调用lua函数
    lua_getglobal(L, "f1");
    lua_pcall(L, 0, 0, 0); //调用f1
    lua_getglobal(L, "f2");
    lua_pushnumber(L, 100);
    lua_pushnumber(L, 10);
    lua_pcall(L, 2, 2, 0); //调用f2
    lua_getglobal(L, "f3");
    char *str = "c";
    lua_pushstring(L, str);
    lua_pcall(L,1,1,0); //调用f3
}
#+end_src
#+begin_src lua
--c2lua.lua
function f1()
    print("hello lua, I'm c!")
end

function f2(a, b)
    return a+b, a-b
end

function f3(str)
    return str .. "_lua"
end
#+end_src
*** 操作Lua中的table
对表的操作主要有查找t[k]、赋值t[k]=v以及遍历表。
#+begin_src lua
-- c2lua.lua
t = {1, 2, ["a"] = 3, ["b"] = {["c"] = 'd'}}
#+end_src
#+begin_src c
int lua_getfield (lua_State *L, int index, const char *k);
/* 查找，把t[k]的值压栈，t为栈上索引index指向的位置，跟Lua一样该api可能触发"index"事件对应的元方法，等价于lua_pushstring(L,const char*k)和lua_gettable(L, int index)两步，所以通常用lua_getfield在表中查找某个值。 */
void lua_setfield (lua_State *L, int index, const char *k);
/* 赋值，等价于t[k]=v，将栈顶的值(v)出栈，其中t为栈上索引index指向的位置，跟Lua一样该api可能触发“newindex”事件对应的元方法。需先调用lua_pushxxx(L,v)将v入栈，再调用lua_setfield赋值。 */

void dump_table(lua_State *L, int index){
    if(lua_type(L, index)!=LUA_TTABLE)
        return;
    // 典型的遍历方法
    lua_pushnil(L);  //nil入栈，相当于从表的第一个位置遍历
    while(lua_next(L, index)!=0){ //没有更多元素，lua_next返回0
        //key-value入栈， key位于栈上-2处，value位于-1处
        printf("%s-%s\n", lua_typename(L,lua_type(L,-2)), lua_typename(L,lua_type(L,-1)));
        lua_pop(L,1); //弹出一个元素，即把value出栈，此时栈顶为key，供下一次遍历
    }
}

void test_table(lua_State *L){
    // 读取table
    lua_getglobal(L, "t");
    lua_getfield(L, 1, "a");  //从索引为1的位置(table)获取t.a，并压栈
    lua_getfield(L, 1, "b");
    lua_getfield(L, -1, "c"); //从索引为-1的位置(栈顶)获取t.c，并压栈

    // 修改table
    lua_settop(L, 1); //设置栈的位置为1，此时栈上只剩一个元素t
    lua_pushnumber(L, 10);
    lua_setfield(L, 1, "a"); //t.a=10
    lua_pushstring(L, "hello c");
    lua_setfield(L, 1, "e"); //t.e="hello c"

    dump_table(L, 1); //遍历table number-number 1-1
                      //          number-number 1-2
                      //          string-number a-3
                      //          string-string e-hello c
                      //          string-table b-table

    //新建一个table
    lua_settop(L, 0); //清空栈
    lua_newtable(L); //创建一个table
    lua_pushboolean(L, 0);
    lua_setfield(L, 1, "new_a");
    lua_pushboolean(L, 1);
    lua_setfield(L, 1, "new_b");

    dump_table(L, 1); //遍历table string-boolean new_a-false
                      //          string-boolean new_b-true
}
#+end_src
注：lua_settop(L, int index)设置栈顶为index，大于index位置的元素都被移除，特别当index为0，即清空栈；如果原来的栈小于index，多余的位置用nil填充。
总之，c调用lua的流程通常是：c把需要的数据入栈——Lua从栈中取出数据——执行Lua脚本——Lua把结果入栈——c从栈中获取结果
** Lua是如何调用c的，Lua是宿主语言，c是附加语言。Lua调用c有几种不同方式，这里只讲解最常用的一种：将c模块编译成so库，然后供Lua调用。
约定：c模块需提供luaopen_xxx接口，xxx与文件名必须一致，比如"mylib"；还需提供一个注册数组，该数组必须命名为luaL_Reg，每一项是{lua函数名，c函数名}，最后一项是{NULL, NULL}；通过luaL_newlib创建新的表入栈，然后将数组中的函数注册进去，这样Lua就可以调用到。
#+begin_src c
//mylib.c

#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>

#define TYPE_BOOLEAN 1
#define TYPE_NUMBER 2
#define TYPE_STRING 3

static int ladd(lua_State *L){
    double op1 = luaL_checknumber(L, -2);
    double op2 = luaL_checknumber(L, -1);
    lua_pushnumber(L, op1+op2);
    return 1;
}

static int lsub(lua_State *L){
    double op1 = luaL_checknumber(L, -2);
    double op2 = luaL_checknumber(L, -1);
    lua_pushnumber(L, op1-op2);
    return 1;
}

static int lavg(lua_State *L){
    double avg = 0.0;
    int n = lua_gettop(L);
    if(n==0){
        lua_pushnumber(L,0);
        return 1;
    }
    int i;
    for(i=1;i<=n;i++){
        avg += luaL_checknumber(L, i);
    }
    avg = avg/n;
    lua_pushnumber(L,avg);
    return 1;
}

static int fn(lua_State *L){
    int type = lua_type(L, -1);
    printf("type = %d\n", type);
    if(type==LUA_TBOOLEAN){
        lua_pushvalue(L, lua_upvalueindex(TYPE_BOOLEAN));
    } else if(type==LUA_TNUMBER){
        lua_pushvalue(L, lua_upvalueindex(TYPE_NUMBER));
    } else if(type==LUA_TSTRING){
        lua_pushvalue(L, lua_upvalueindex(TYPE_STRING));
    }
    return 1;
}

int luaopen_mylib(lua_State *L){
    luaL_Reg l[] = {
        {"add", ladd},
        {"sub", lsub},
        {"avg", lavg},
        {NULL, NULL},
    };
    luaL_newlib(L,l);

    lua_pushliteral(L, "BOOLEAN");
    lua_pushliteral(L, "NUMBER");
    lua_pushliteral(L, "STRING");
    lua_pushcclosure(L, fn, 3);

    lua_setfield(L, -2, "fn");
    return 1;
}
#+end_src
Lua文件里，需将so库加入cpath路径里，通过require返回栈上的表，Lua就可以调用表中注册的接口，比如，add、sub、avg等
Lua调用c api的过程：Lua将api需要的参数入栈——c提取到参数——处理——c将结果入栈——Lua提取出结果
#+begin_src lua
package.cpath = "./?.so"

local mylib = require "mylib"

local a, b = 3.14, 1.57

print(mylib.add(a, b), mylib.sub(a, b))   -- 4.71. 1.57

print(mylib.avg())  -- 0.0

print(mylib.avg(1,2,3,4,5)) -- 3.0

print(mylib.fn(true), mylib.fn(10), mylib.fn("abc")) -- BOOLEAN NUMBER STRING
#+end_src
例中还提供了简单的c闭包的使用方法，关于c闭包，提供了多个上值（upvalue）关联到函数上，这些upvalue可以理解成该函数内部的全局变量，即只能被该函数访问到，且在函数返回时不会消亡，该函数任何时候都可以访问到。

void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n);
用来把一个新的c闭包压栈，fn是一个c api，n指定关联多少个upvalue，这些upvalue需要依次压栈，即栈顶位置是第n个upvalue的值，lua_pushcclosure会把这些upvalue出栈，这些upvalue的伪索引依次为1-n。

int lua_upvalueindex (int i);
获取当前运行函数第i个upvalue的值。

总之，Lua调用c的流程：编写好c模块，在堆栈上建一个表，将接口注册给这个表，然后把c模块编译成so库，在Lua里require这个so库，就可以调用注册的函数了。
